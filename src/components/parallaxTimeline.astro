---
/* adapted from W3Schools https://www.w3schools.com/howto/howto_css_timeline.asp */

//Grabbing text content for timeline, each event must be \n seperated with the following format: {header}:{paragraph}
import tlText from '../content/text/timeline.txt?raw';

//Coverting line seperated strings to array with alternating directions
const tlMap = [];
  const tlArray = tlText.split("\n");
  for (let i=0; i<tlArray.length; i++){
    const nodeObject = {
      text: tlArray[i],
      direction: ""
    };
      if(i% 2 == 0){
          nodeObject.direction = "container left";
      }
      else{
          nodeObject.direction = "container right";
      }
    tlMap.push(nodeObject);
  }
---


<style>
    * {
  box-sizing: border-box;
}

/* set text colour */
h1,
h2,
h3,
h4,
h5,
h6,
p {
  color: white;
}

/* The actual timeline (the vertical ruler) */
.timeline {
  position: relative;
  max-width: 1200px;
  margin: 0 auto;
}

/* The actual timeline (the vertical ruler) */
.timeline::after {
  content: '';
  position: absolute;
  width: 6px;
  background-color: rgb(var(--gray-dark));
  top: 0;
  bottom: 0;
  left: 50%;
  margin-left: -3px;
}

/* Container around content */
.container {
  padding: 10px 40px;
  position: relative;
  width: 50%;
}

/* The circles on the timeline */
.container::after {
  content: '';
  position: absolute;
  width: 25px;
  height: 25px;
  right: -17px;
  background-color: rgb(var(--gray-dark));
  border: 4px solid var(--accent);
  top: 15px;
  border-radius: 50%;
  z-index: 1;
}

/* Place the container to the left */
.left {
  left: 0;
}

/* Place the container to the right */
.right {
  left: 50%;
}

/* Add arrows to the left container (pointing right) */
.left::before {
  content: " ";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  right: 30px;
  border: medium solid var(--accent);
  border-width: 10px 0 10px 10px;
  border-color: transparent transparent transparent var(--accent);
}

/* Add arrows to the right container (pointing left) */
.right::before {
  content: " ";
  height: 0;
  position: absolute;
  top: 22px;
  width: 0;
  z-index: 1;
  left: 30px;
  border: medium solid var(--accent);
  border-width: 10px 10px 10px 0;
  border-color: transparent var(--accent) transparent transparent;
}

/* Fix the circle for containers on the right side */
.right::after {
  left: -16px;
}

/* The actual content */
.content {
  padding: 20px 30px;
  background-color: var(--accent);
  position: relative;
  border-radius: 6px;
}

/* Media queries - Responsive timeline on screens less than 600px wide */
@media screen and (max-width: 600px) {
/* Place the timelime to the left */
  .timeline::after {
    left: 31px;
  }
/* Full-width containers */
  .container {
    width: 100%;
    padding-left: 70px;
    padding-right: 25px;
  }

/* Make sure that all arrows are pointing leftwards */
  .container::before {
    left: 60px;
    border: medium solid var(--accent);
    border-width: 10px 10px 10px 0;
    border-color: transparent var(--accent) transparent transparent;
  }

/* Make sure all circles are at the same spot */
  .left::after, .right::after {
    left: 15px;
  }

/* Make all right containers behave like the left ones */
  .right {
    left: 0%;
  }
}
</style>

<div class="timeline">
  {/* Iterate through string:direction array to generate discrete content bubbles */}
  {tlMap.map((nodeObject) => (
    <div class={nodeObject.direction}>
      <div class="content">
        {/* Splitting header and paragraph from string using : seperator */}
        <h3>{nodeObject.text.split(":")[0]}</h3>
        <p>{nodeObject.text.split(":")[1]}</p>
      </div>
    </div>
    ))
  }
</div>